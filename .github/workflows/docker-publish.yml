name: Test, Build and Push Docker Image

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  packages: write

jobs:
  build_and_publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          # Install the package in development mode
          pip install -e .
          # Install test dependencies with coverage
          pip install pytest pytest-timeout pytest-cov
          # Ensure hnswlib is properly built
          pip install --force-reinstall --no-deps hnswlib

      - name: Run unit tests with coverage
        timeout-minutes: 15
        run: |
          source .venv/bin/activate
          # Run tests with coverage reporting for both Coveralls and SonarCloud
          pytest tests -v --timeout=60 --cov=. --cov-report=lcov:coverage.lcov --cov-report=xml:coverage.xml

      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: coverage.lcov

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.python.coverage.reportPaths=coverage.xml

      - name: Login with PAT
        run: echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Create Dockerfile
        run: |
          # First, check your pyproject.toml configuration
          cat pyproject.toml
          
          cat > Dockerfile << 'EOF'
          FROM python:3.11-slim

          WORKDIR /app

          # Install required system dependencies
          RUN apt-get update && apt-get install -y --no-install-recommends \
              build-essential \
              && apt-get clean \
              && rm -rf /var/lib/apt/lists/*

          # Copy your project files
          COPY . /app/

          # Install your package in standard mode
          RUN pip install --no-cache-dir .
          
          # Create a volume for data persistence
          VOLUME /data

          # Set the working directory to /data by default
          WORKDIR /data

          # Set environment variable for data location
          ENV VCRAFT_ROOT=/data

          # Default command: show help
          # Use explicitly the full path to the installed script 
          ENTRYPOINT ["/usr/local/bin/vecraft"]
          CMD ["--help"]
          EOF

      - name: Build Docker image
        run: |
          docker build . -t ghcr.io/${{ github.repository }}:latest
          docker tag ghcr.io/${{ github.repository }}:latest ghcr.io/${{ github.repository }}:${{ github.ref_name }}

      - name: Verify Docker image
        run: |
          # Test that the CLI is accessible in the image
          docker run --rm ghcr.io/${{ github.repository }}:latest --help

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository }}:latest
          docker push ghcr.io/${{ github.repository }}:${{ github.ref_name }}